-if(id == undefined)
	-var id = Math.round(Math.random()*100)
-else if (typeof id === 'number')
	-var id = Math.round(Math.random()*100)
// Getting the model for the colour
-if(model == undefined)
	-var model = "proModel"
-if(classes == undefined)
	-var classes = ''
-if(light == undefined)
	-
		var light = {
			size: {
				width: '350',height: '60'
			},
			wavelengths:[
				{nm:"k3000",ratio:.1},
				{nm:"nm440",ratio:.125},
				{nm:"nm460",ratio:.125},
				{nm:"nm630",ratio:.325},
				{nm:"nm660",ratio:.325},
			]
		}
		
	
.light-container(class=classes)
	.light(id=model, style="width: "+light.width+"px; height: "+light.height+"px")
		-if(coverageType !== 'rainbow')
			.light-btn-label Veg
			div(class="material-toggle veg-toggle-container")
				input(type="checkbox", id="veg-toggle"+id, name="veg-toggle"+id, checked=true)
				label(for="veg-toggle"+id, class="veg-label")
			.light-btn-label Bloom
			div(class="material-toggle flower-toggle-container")
				input(type="checkbox", id="flower-toggle"+id, name="flower-toggle"+id, checked=true)
				label(for="flower-toggle"+id, class="flower-label")
		-else if(coverageType == 'rainbow')
			div(class="material-toggle rainbow veg-toggle-container")
				input(type="checkbox", id="veg-toggle"+id, name="veg-toggle"+id, checked=true)
				label(for="veg-toggle"+id, class="veg-label")
			div(class="material-toggle rainbow flower-toggle-container")
				input(type="checkbox", id="flower-toggle"+id, name="flower-toggle"+id, checked=true)
				label(for="flower-toggle"+id, class="flower-label")

		//- -for(i=0;i<light.spectrums.length;i++)
		//- 	-var length = light.spectrums.length
		//- 	-var points = (i/length)*light.width
	-var spread = 200
	-var height = 200
	-var inward = 10
	-var directlyBelow = 200
	-var wideCoverage = 280
	-var evenCoverage = false
	-if(coverageType !== 'rainbow')
		-light.emitWidth = light.width - (inward*2)
		-light.coverageWidth = (light.width-(inward*2))+(2*spread)
		.spectrums-container(style="width: "+light.emitWidth+"px").clearfix
			svg(style="height: "+height+"px")
				-var percentUsed = 0
				-var newPercentUsed = percentUsed
				each wavelength, key in light.wavelengths
					//- -if(key !== 0 && key !== light.wavelengths.length-1)
					-if(evenCoverage == true)
						-newPercentUsed = percentUsed + (1/light.wavelengths.length)
						//- br
						//- span=percentUsed+" is percentUsed"
					-if(evenCoverage !== true)
						-newPercentUsed = percentUsed + wavelength.ratio
					//- // -
					//- // 	var points = (light.emitWidth*percentUsed)+",0 "
					//- // -
					//- // 	points.concat(
					//- // 		(light.emitWidth*newPercentUsed)+",0 "
					//- // 	)
					//- // -
					//- // 	points.concat(
					//- // 		((light.emitWidth*newPercentUsed)-spread)+","+height+" "
					//- // 	)
					//- // -
					//- // 	points.concat(
					//- // 		((light.emitWidth*percentUsed)-spread)+","+height
					//- // 	)
					-
						var points = (light.emitWidth*percentUsed)+",0 "+(light.emitWidth*newPercentUsed)+",0 "+((light.coverageWidth*newPercentUsed)-spread)+","+height+" "+((light.coverageWidth*percentUsed)-spread)+","+height

					polygon(id=wavelength.nm, points=points)
					-percentUsed = newPercentUsed
					//- -else if(key == 0)
					//- 	polygon(id=wavelength.nm,points=""+((((light.width/light.wavelengths.length))*(key))+(inward))+",0 "+((((light.width/light.wavelengths.length))*(key+1)))+",0 "+(((light.coverageWidth/light.wavelengths.length)*(key+1))-(spread))+","+height+" "+(((light.coverageWidth/light.wavelengths.length)*(key))-(spread-inward))+","+height)
					//- -else if(key == light.wavelengths.length-1)
					//- 	polygon(id=wavelength.nm,points=((((light.width/light.wavelengths.length))*(key)))+",0 "+((((light.width/light.wavelengths.length))*(key+1))-(inward))+",0 "+(((light.coverageWidth/light.wavelengths.length)*(key+1))-(spread-(inward)))+","+height+" "+(((light.coverageWidth/light.wavelengths.length)*(key))-(spread-(inward*2)))+",0")
						//- br
						//- span=percentUsed+" is percentUsed"
				-var percentUsed = 0
				-var newPercentUsed = percentUsed

				//- 	span= parseInt(light.width)+parseInt(spread-inward)
				
	-if(coverageType == 'rainbow')
		-var spread = 0
		-var height = 480
		-var inward = 7
		-var directlyBelow = 200
		-var wideCoverage = 280
		-var rainbowWavelengths = ["rgb(255, 65, 65)","rgb(255, 160, 61)","rgb(255, 224, 59)","#8cd115","rgb(70, 164, 250)","rgb(46, 143, 232)","rgb(105, 52, 147)"]
		.spectrums-container(style="width: "+light.width+"px").clearfix
			svg(style="height: "+height+"px")
				each wavelength, key in rainbowWavelengths
					-if(key == 0)
						polygon(fill=wavelength, points=""+(key*(light.width/rainbowWavelengths.length)+inward)+",0 "+(key*(light.width/rainbowWavelengths.length)+inward)+","+height+" "+(key+1)*(light.width/rainbowWavelengths.length)+","+height+" "+(key+1)*(light.width/rainbowWavelengths.length)+",0")
					-else if(key==rainbowWavelengths.length-1)
						polygon(fill=wavelength, points=""+key*(light.width/rainbowWavelengths.length)+",0 "+key*(light.width/rainbowWavelengths.length)+","+height+" "+((key+1)*(light.width/rainbowWavelengths.length)-inward)+","+height+" "+((key+1)*(light.width/rainbowWavelengths.length)-inward)+",0")
					-else
						polygon(fill=wavelength, points=""+key*(light.width/rainbowWavelengths.length)+",0 "+key*(light.width/rainbowWavelengths.length)+","+height+" "+(key+1)*(light.width/rainbowWavelengths.length)+","+height+" "+(key+1)*(light.width/rainbowWavelengths.length)+",0")
			
		
		
			
			//- //SICK SHIT
			//- svg(id="nm430", style="position: absolute;left: 0;height: "+height+"px")
			//- 	polygon(points="-"+((light.width/2)-inward)+",0 -"+((light.width/2)+spread)+","+wideCoverage+" 0,"+directlyBelow+" 0,0")
			//- svg(id="nm460", style="position: absolute;left: 0;height: "+height+"px")
			//- 	polygon(points=""+(light.width/2)-inward+",0 "+((light.width/2)+spread)+","+wideCoverage+" 0,"+directlyBelow+" 0,0")
