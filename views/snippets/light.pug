-if(id == undefined)
	-var id = Math.round(Math.random()*100)
-else if (typeof id === 'number')
	-var id = Math.round(Math.random()*100)
// Getting the model for the colour
-if(classes == undefined)
	-var classes = ''
-
	var templateLight = {
		width: 350,
		height: 60,
		depth: 20,
		switchable: true,
		wavelengths:[
			{nm:"k3000",ratio:.1},
			{nm:"nm440",ratio:.125},
			{nm:"nm460",ratio:.125},
			{nm:"nm630",ratio:.325},
			{nm:"nm660",ratio:.325},
		],
		model: 'pro',
		emissionInset: 14,
		wattage: 800,
		wattageFormatted: function(){return this.wattage+"W"},
		lightType: "led",
		price: 600,
		priceFormatted: function(){return "$"+this.price},
		spectrumSpread: 'both',
		showLables: true,
		lensAngle: 120,
		showInfoButton: true,
		customLightHeight: undefined,
		customLightSpread: undefined,
		lightHeight: function(){
			if(this.customLightHeight !== undefined){
				return this.customLightHeight
			}
			else {
				return (((Math.sqrt(this.wattage)))*15)
			}
		},
		diodeCoverage: function(height){
			if(this.customLightSpread == undefined){
				return (Math.tan(r2d2(this.lensAngle)/2)*height)
			}
			else {
				return this.customLightSpread/2
			}
		},
		coverageWidth: function(height){
				return (((this.diodeCoverage(this.lightHeight()))*2)+this.width)
		},
		lightOpacity: 1,
		centerColour: 'auto'
	}
-if(light)
	//- .debug whaaaaat
	each val, property in templateLight
		//- span= val
		//- span= property
		-if(light[property] !== undefined)
			//- span fuck
		-else
			-light[property] = templateLight[property]
		
-else
	-var light = templateLight
//- span= light
-if(growlight)
	-light.width = growlight.width*6
	-light.height = growlight.height*6
	-light.depth = growlight.depth*6
	-light.price = growlight.price
	-light.wattage = growlight.wattage
	-light.model = growlight.model
	-light.backBoost = false
	-light.lightOpacity = .75
	-light.centerOut = false
	-light.ledBrand = growlight.ledBrand
	-light.lightType = growlight.lightType
	-light.vendor = growlight.vendor

.light-container(class=classes)
	.light(class=light.model, style="width: "+light.width+"px; height: "+light.height+"px")
		-if(light.showLables)
			.light-labels-positioner
				.light-labels-container
					.light-label.wattage
						span= light.wattageFormatted()
					.light-label.price
						span= light.priceFormatted()
					.light-label.type
						-if(light.ledBrand)
							-if(light.model == 'Pro')
								span= light.ledBrand
							-else
								span= light.ledBrand
								//- span= light.type
						-else
							span= light.lightType
					-if(light.vendor)
						.light-label.vendor
							span= light.vendor

		-if(light.showInfoButton)
			.light-info-container
				.light-info-positioner
					i.fa.fa-clipboard-text
					.more-info
						| All Specs
		-if(light.switchable)
			.light-switches-container
				.light-switches-positioner
					-if(light.spectrumType !== 'rainbow')
						div(class="material-toggle veg-toggle-container")
							.light-btn-label.veg-spectrum Veg
							input(type="checkbox", id="veg-toggle"+id, name="veg-toggle"+id, checked=true)
							label(for="veg-toggle"+id, class="veg-label")
						div(class="material-toggle flower-toggle-container")
							.light-btn-label.flower-spectrum Flower
							input(type="checkbox", id="flower-toggle"+id, name="flower-toggle"+id, checked=true)
							label(for="flower-toggle"+id, class="flower-label")
	//-  
		Renders Light Output (Spectrum)
	-var height = light.lightHeight()
	-var directlyBelow = 200
	-var wideCoverage = 280
	-light.emitWidth = light.width - (light.emissionInset*2)
	-var coverageWidth = light.diodeCoverage(light.lightHeight())
	.spectrums-container(style="width: "+light.emitWidth+"px;height:"+height).clearfix
		-var percentUsed = 0
		-var newPercentUsed = percentUsed
		-var zindex = 20
		-var center = true
		-if(light.centerColour)
			-if(light.centerColour == 'auto')
				-var centerNumber = light.wavelengths.length/2
			-else
				-var centerNumber = light.centerColour
		-else
			-var centerNumber = light.wavelengths.length/2
		each wavelength, key in light.wavelengths
			-if(wavelength.ratio !== 'auto')
				-newPercentUsed = percentUsed + wavelength.ratio
			-if(wavelength.ratio == 'auto')
				-newPercentUsed = percentUsed + (1/light.wavelengths.length)
			-if(light.spectrumSpread !== 'both')
				-
					var points = (light.emitWidth*percentUsed)+",0 "+(light.emitWidth*newPercentUsed)+",0 "+((coverageWidth*newPercentUsed))+","+height+" "+((coverageWidth*percentUsed))+","+height
			-else if(light.spectrumSpread == 'both')
				-
					var points = (light.emitWidth*percentUsed)+",0 "+(light.emitWidth*newPercentUsed)+",0 "+((light.emitWidth*newPercentUsed)+((coverageWidth)))+","+height+" "+((light.emitWidth*percentUsed)-((coverageWidth)))+","+height

			-if(light.centerOut)
				-if(light.centerOut == true)
					-if(key+1 < centerNumber)
						-zindex = zindex + 1
					-else if(key+1 >= centerNumber)
						-if(center == true)
							-zindex = zindex + 1
							-center = false
						-else
							-zindex = zindex - 1
			svg(style="height: "+height+"px;z-index:"+zindex)
				polygon(class=wavelength.nm, points=points, style="z-index:"+zindex+";opacity:"+light.lightOpacity)
			-if(light.backBoost)
				svg(style="height: "+height+"px;z-index:"+(zindex-15))
					polygon(class=wavelength.nm, points=points, style="z-index:"+(zindex-15)+";opacity:1")
			-percentUsed = newPercentUsed
		-var percentUsed = 0
		-var newPercentUsed = percentUsed
